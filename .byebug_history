q
raw_response.code == 200
raw_response.code == "200"
raw_response.code
raw_response.response.code
raw_response.response.is_ok?
raw_response.response.class
raw_response.response
raw_response.response.body
raw_response.response
raw_response
raw_response.body
raw_response
c
trader.cancel_order('ed3ede1e-38d7-4ff1-94bf-e660f8c87093')
trader.cancel_order('50878192-ff53-4f06-8c86-653732334eef')
q
trader.cancel_order('50878192-ff53-4f06-8c86-653732334eef')
q
trader.cancel_order('50878192-ff53-4f06-8c86-653732334eef')
q
pp HTTParty.get('https://api.robinhood.com')
require 'pp'
pp HTTParty.get('https://api.robinhood.com')
HTTParty.get('https://api.robinhood.com')
trader.cancel_order('50878192-ff53-4f06-8c86-653732334eef')
q
trader.cancel_order('50878192-ff53-4f06-8c86-653732334eef')
q
trader.limit_buy("AXAS", "fc7cb596-1ce1-4f65-bb28-343c1ff7abb2", 0.6991, 1)
q
trader.limit_buy("AXAS", "fc7cb596-1ce1-4f65-bb28-343c1ff7abb2", 0.6991, 1)
q
rake
trader.limit_buy("AXAS", "https://api.robinhood.com/instruments/fc7cb596-1ce1-4f65-bb28-343c1ff7abb2/", 0.9991, 1)
c
trader.limit_sell("AXAS", "https://api.robinhood.com/instruments/fc7cb596-1ce1-4f65-bb28-343c1ff7abb2/", 1.10, 1)
trader.limit_sell("AXAS", "https://api.robinhood.com/instruments/fc7cb596-1ce1-4f65-bb28-343c1ff7abb2/", 1.07, 1)
c
trader.limit_sell("AXAS", "https://api.robinhood.com/instruments/fc7cb596-1ce1-4f65-bb28-343c1ff7abb2/", 1.07, 1)c
trader.sell("AXAS", "https://api.robinhood.com/instruments/fc7cb596-1ce1-4f65-bb28-343c1ff7abb2/", 1.07, 1)
trader.sell("AXAX", "https://api.robinhood.com/instruments/fc7cb596-1ce1-4f65-bb28-343c1ff7abb2/", 1.07, 1)
c
trader.sell("AXAS", "https://api.robinhood.com/instruments/fc7cb596-1ce1-4f65-bb28-343c1ff7abb2/", 1.07, 1, 1.09)
c
trader.sell("AXAS", "https://api.robinhood.com/instruments/fc7cb596-1ce1-4f65-bb28-343c1ff7abb2/", 1.07, 1, 1.09)
trader.sell("AXAX", "https://api.robinhood.com/instruments/fc7cb596-1ce1-4f65-bb28-343c1ff7abb2/", 1.07, 1, 1.09)
trader
q
pp orders
require 'pp'
orders = trader.orders['results']
trader.orders
c
pp trader
require 'pp'
trader
q
hk
hs
hk = trader.instruments("HK")['results'].first
hk = trader.instruments("HK").first
trader.instruments("HK")
q
ENV["ROBINHOOD_ACCOUNT_NUMBER"]
q
trader.accounts
trader
quit
trader.accounts
trader
q
response
c
response
c
password
response
q
c
trader.get_token("nemrow", "Rlights11d")
trader.login("nemrow", "Rlights11d")
trader = Robinhood.new
q
raw_response
response
q
trader.buy(stock["symbol"], stock["url"], "0.84", 1)
q
trader.buy(stock["symbol"], stock["url"], "0.84", 1)
q
stock['results'][0]['symbol']
stock['results'][0]['url']
stock['results'][0].url
stock['results'][0]
stock['results']
stock[0]
stock
q
trader.buy("LINE", line["results"][0]["url"], "1.42", 1)
q
account['results'][0]['url']
account['results']['url']
account['results']
account['results']['url']
account['results']
account['resultys']
account
q
trader.buy("LINE", line["results"][0]["url"], "1.42", 1)
q
account['results']
account
q
trader.buy("LINE", line["results"][0]["url"], "1.42", 1)
buy("LINE", line["results"][0]["url"], "1.42", 1)
line["results"][0]["url"]
line["results"][0]
line["results"]
line
q
trader.instruments("GOOG")q
q
trader.instruments("GOOG")
trader.instruments("GOOG,GPRO")
trader.instruments("GOOG")
q
"s".upcase
raw_response
q
response
c
raw_response
q
headers
raw_response
q
headers
headers.merge!({"AUTH" => "slksjslk"})
headers
headers.merge({"AUTH" => "slksjslk"})
headers
q
response
response = JSON.parse(raw_response.body)
raw_response.body
raw_response
q
JSON.parse(response.body)["token"]
JSON.parse(response.body)
response.body
response.response
response
c
q
response
responde
quit
y
quit
q
response
q
response
q
response
q
HTTParty.get('http://requestb.in/v0974bv0', query: {something: 5})
HTTParty
get('http://requestb.in/v0974bv0', query: {something: 5})
q
 get('http://requestb.in/v0974bv0', query: {something: 5})
q
Robinhood.yuck
